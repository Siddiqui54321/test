Give sudo rights to user u1:    #usermod -aG wheel u1
Copy file:						#cp 


File Management – Key Topics (Rocky Linux / RHEL)

1. Understanding the Linux Filesystem Hierarchy

	Know the purpose of directories like:
	/, /home, /etc, /var, /tmp, /usr, /opt, /bin, /sbin, /lib
	Use lsblk, df -h, and du -sh to inspect disk usage and mounts.

2. Basic File & Directory Commands
	Task				Command
	*List files			ls, ls -l, ls -a, ls -lh, ls -ld
						ls 		– List files and folders.
						ls -l 	– Long listing with details (permissions, size, date).
						ls -a 	– Show all files, including hidden ones.
						ls -ld – Show info about the directory itself, not contents.
						ls -lh – Long list with human-readable sizes (KB, MB).
	*Copy files			cp file1 file2, cp -r dir1 dir2
	*Move/Rename			mv old new
	*Delete files		rm file, rm -r dir
	*Create files		touch file.txt, echo 'some text' > file.txt
	*Create directories	mkdir dir, mkdir -p dir/subdir

3. Viewing and Editing Files
	*View contents:
		cat, less, more, head, tail, tail -f
	*Edit files:
		CLI editors like nano, vim, or vi

4. File Permissions
	*Understand user (u), group (g), others (o).
	*Use ls -l to view permissions.
	*Change permissions:
		chmod 755 file, chmod u+x script.sh
	*Change ownership:
		chown user:group file
	*Special permissions:
		SUID, SGID, Sticky Bit (chmod 4755, chmod +t)

5. Finding and Locating Files
	*find /path -name "file.txt"
	*find / -type f -size +10M
	*locate file.txt (requires mlocate and updated database via updatedb)
	*which command, whereis, type

6. File Compression and Archiving
	*tar -cvf archive.tar file1 file2
	*tar -xvf archive.tar
	*gzip file.txt, gunzip file.txt.gz
	*xz, bzip2 and variants (.xz, .bz2, .gz)

7. Links
	*Hard links: ln file1 file2
	*Symbolic links: ln -s target linkname
	*Understand the difference: ls -li shows inode numbers

8. Redirection and Pipes
	*Redirect output/input:
		command > file, command >> file, command < file
	*Combine commands with pipes:
		ls -l | grep txt
	*Combine redirection and pipes:
		grep error logfile | tee errors.txt

9. File System Mounting (Basic)
	*View mounts: mount, df -h, lsblk
	*Mount manually:
		mount /dev/sdb1 /mnt/data
	*Unmount:
		umount /mnt/data

📝 Sample Practice Questions
	*How do you copy a directory recursively from /opt/app to /backup?		cp -r /opt/app /backup
		cp -r /opt/app /backup
	*How do you list all .log files in /var/log modified in the last 2 days?	
		find /var/log -name "*.log" -mtime -2
	*What command shows disk usage for all directories in /var?		
		du -sh /var/*
	*How do you make a script file executable?
		chmod +x script.sh


-------------------------------------------------------------------------------
Rocky Linux: File Permission – Exam Preparation Guide

1. Understanding File Permissions
	*Linux uses a permission model based on:
		User (u) 	– owner
		Group (g) 	– group owner
		Others (o) 	– everyone else
	*Run:
		ls -l file.txt
	*Example output:
		-rw-r--r--. 1 user1 user1 1234 Sep 18 10:30 file.txt
	*Breakdown:
		*	- 	→ Regular file
		*	rw- → Owner:  read & write
		*	r-- → Group:  read
		*	r-- → Others: read

2. Changing Permissions with chmod
	*Symbolic Mode:
		*Add execute to user		chmod u+x file.sh
		*Remove write from group	chmod g-w file.txt
		*Add read to all			chmod a+r file.txt

	*Numeric (Octal) Mode:
		Octal	Meaning					Permissions
		7		Read + Write + Execute	rwx
		6		Read + Write			rw-
		5		Read + Execute			r-x
		4		Read					r--
		0		No permission			---

	*Example:
		*chmod 755 script.sh
			Sets:
				User: 	rwx
				Group: 	r-x
				Others: r-x

3. Changing Ownership with chown and chgrp
	*chown user file.txt		Change owner
	*chown user:group file.txt	Change owner and group
	*chgrp group file.txt		Change group only
	
	
4. Special Permission Bits
	*SUID		s (user exec)		4###	Run as file owner
	*SGID		s (group exec)		#2##	Run as group owner or set group on dir
	*Sticky Bit	t (others exec)		##1#	Only owner can delete in shared dir
	Examples:
		*Set SUID:
			chmod u+s /path/to/file
			chmod 4755 /path/to/file
		*Set SGID on directory:
			chmod g+s /data/shared
			chmod 2755 /data/shared
		*Set Sticky Bit (on /tmp-like directories):
			chmod +t /shared/folder
			chmod 1777 /shared/folder

5. Recursive Permission Changes
	*To apply permissions recursively:
		chmod -R 755 /var/www
		chown -R apache:apache /var/www

6. Viewing Effective Permissions
	*Use:
		ls -l
		namei -lx /path/to/file
		stat file.txt

📝 Sample Exam Practice Questions
	*Give read and execute permission to others for /opt/tool.sh
		chmod o+rx /opt/tool.sh
	*Change owner of /srv/www to apache and group to web
		chown apache:web /srv/www
	*Set SGID on a directory so new files inherit group
		chmod g+s /data/projects
	*Make a script executable only by its owner
		chmod 700 deploy.sh
	*Set Sticky Bit on /shared so only owners can delete
		chmod +t /shared


-------------------------------------------------------------------------------
Rocky Linux Exam Preparation Guide: File Permission & Disk Management

Section 1: File Permissions
	1.1 File Permission Basics
	
	Every file and directory in Linux has 3 types of permissions for 3 categories of users:

	Category		Symbol		Description
	User (owner)	u			Creator of the file
	Group			g			Group associated with the file
	Others			o			All other users

	Permission		Symbol		Description
	Read			r			View file contents
	Write			w			Modify file contents
	Execute			x			Execute file as a program

	1.2 Viewing Permissions
	ls -l
	Example:
	-rwxr-xr-- 1 user group 1234 Sep 19 09:00 myscript.sh

	1.3 Changing Permissions
		chmod – Change permissions

		Symbolic method:
			chmod u+x myfile.sh   # Add execute for user
			chmod g-w myfile.sh   # Remove write from group
			chmod o=r myfile.sh   # Set read-only for others
	
		Numeric method:
			r = 4, w = 2, x = 1 → Sum = permission
			chmod 755 myfile.sh   # rwxr-xr-x
			chmod 644 mydoc.txt   # rw-r--r--

	chown – Change ownership
		chown user:group filename

	chgrp – Change group
		chgrp newgroup filename


🗄️ Section 2: Disk Management
	2.1 Viewing Disk Usage
		df – Report disk space usage
		df -h

		du – Report file space usage
		du -sh /path/to/directory

	2.2 Managing Partitions
		lsblk – List block devices
		
		fdisk – Partitioning tool (MBR)
			fdisk /dev/sdX

		parted – Partitioning tool (GPT)
			parted /dev/sdX

	2.3 Filesystem Operations
		Format a partition
			mkfs.ext4 /dev/sdX1

		Mounting a partition
			mount /dev/sdX1 /mnt

		Unmounting
			umount /mnt

		Add permanent mount (edit /etc/fstab)
		Example:
			/dev/sdb1  /data  ext4  defaults  0  2

	2.4 Logical Volume Management (LVM)
		Basic LVM Workflow
			Create physical volume (PV)
				pvcreate /dev/sdX
			Create volume group (VG)
				vgcreate my_vg /dev/sdX
			Create logical volume (LV)
				lvcreate -L 5G -n my_lv my_vg
			Format and mount
				mkfs.ext4 /dev/my_vg/my_lv
				mount /dev/my_vg/my_lv /mnt
			Extend LV
				lvextend -L +1G /dev/my_vg/my_lv
				resize2fs /dev/my_vg/my_lv

🔐 Extra: Special File Permissions
Special Bit	Use	Command	Symbol
SUID	Run as file owner	chmod u+s filename	s in user
SGID	Run as group	chmod g+s dirname	s in group
Sticky Bit	Restrict file deletion	chmod +t /tmp	t in others

Example:

chmod 1777 /shared  # Sticky bit for shared dir

📋 Exam Tips

Understand symbolic vs numeric permissions.

Practice changing ownerships and groups.

Know how to create, mount, and format partitions.

Be able to extend and manage LVM.

Edit /etc/fstab safely – one typo can break boot!

Use man pages in the exam if allowed (man chmod, man fstab, etc.).

Try tasks in a Rocky Linux VM or lab environment.




BSO292025 / 2025100087
BSO292022 / 2025100088 / RBH290008
BSO290550 / 2025100089 / 
------------------------------------------------------------
-create user u1 	useradd u1 / passwd u1
-make dir in /home/work by user u1		mkdir /home/work
-create file a.txt in /home/work by user u1		touch abc.txt
-assign permission to u1 to edit a.txt		#chown u1:u1 /home/work
-create another user u2
-give the right to edit a.txt
groupadd mygroup
getent -aG mygroup u1
chown :mygroup /home/work/a.txt
chmod 664 /home/work/a.txt

chown :mygourp /home/work.
chmod







































#useradd u1
#passwd u1
#mkdir /home/work
#chown u1:u1 /home/work
#su - u1
$cd /home/work
$echo 'testing' > a.txt
#useradd u2
#passwd u2
u1 and u2 can both edit /home/work/a.txt
File is protected from other users
#groupadd workgroup
#usermod -aG workgroup u1
#usermod -aG workgroup u2
#chown :workgroup /home/work/a.txt
#chmod 664 /home/work/a.txt
#chown :workgroup /home/work
#chmod 775 /home/work
------------------------------------------------------------



#usermod -aG wheel u1
#passwd u1
$sudo dnf install tree





------Directory
mkdir shared 
rmdir shared
rm -r shared 	(Directory with contents)
rm -rf shared	(Directory - force delete)
ls -R abc		(to see what is inside the dir shared)

------File
echo > abc.txt
touch abc.txt xyz.txt
rm abc.txt				(normal delete)
rm -f abc.txt			(no confirmation)
sudo rm -f abc.txt		(If You See: Permission denied) and (have admin access), 

------Users usermod -aG mygroup u1
useradd u1
userwd u1
userdel u1
userdel -r u1			remove user with dir and files
sudo rm -rf /home/u1 /var/mail/u1
--
getent passwd u1		Check if the user u1 exists	
rm -f /var/mail/u1		Remove the old mailbox file
--
sudo useradd -m noman   (If not, recreate the user)

--User Issue (user u1 not shows in /home but its already created)
	sudo mkdir /home/u1			(Create the directory)
	sudo chown u1:u1 /home/u1	(Set ownership to user u1)
	sudo chmod 755 /home/u1		(ive proper access permissions)
--Delete the user and re-create it properly
	sudo userdel u1
	sudo rm -rf /home/u1 /var/mail/u1
	sudo useradd -m u1
	sudo passwd u1
	-m tells it to create /home/u1
	passwd u1 sets the user password
--Confirm Everything
	getent passwd u1	(Check user exists:)			u1:x:1001:1001::/home/u1:/bin/bash
	ls -ld /home/u1		(Check home directory exists)	drwxr-xr-x  2 root root 4096 Sep 15 10:00 /home/u1


------------------------------------------------------------------






#ls /home - it returen
sysadmin 	u1	
how can I know u1 is user or directory

inet 127.0.0.1/8 scope host lo

1. reboot VM
2. At the GRUB boot menu, quickly press e to edit the default boot entry.
3. Find the line starting with linux	i.e. linux /vmlinuz-... ro ...
4. Replace ro (read-only) with rw (read-write)
5. Press Ctrl + X or F10 to boot with these changes.
6. If for some reason it’s still read-only:
	mount -o remount,rw /
7. passwd 	(Reset the Password)
8. Relabel SELinux (important)
	touch /.autorelabel
9. Reboot the System
	exec /sbin/init		or   reboot -f
	



Is SSH Running on the VM?
sudo systemctl status sshd
sudo systemctl start sshd
sudo systemctl enable sshd
sudo dnf install -y openssh-server	(If it’s not installed)

Firewall Might Be Blocking Port 22
sudo firewall-cmd --list-all	(Check firewall status)









#ansible --version
#ls /etc			to check ansible folder on machine
#ll /etc | greb ansible		no result its means no ansible
#

--GROUPS
-used to manage permissions (read, write, execute) for multiple users at once.

User and Group Relationships
A user can be in one primary group and multiple secondary groups.
Primary group is defined at user creation (or with usermod -g).
Secondary groups are assigned via usermod -aG or gpasswd.

-Primary group (one per user) - Default group - when user create new file
 (defined in /etc/passwd)	
	-every user must have one primary group
	-stored in /etc/passwd file as the user's GID (group ID)
-Secondary (or supplementary) group (zero or more per user)
 (defined in /etc/group)
	-secondary groups belongs to user, do not effect file creation but grant access to files or devices shared by those groups
	-A user can be part of many secondary groups - no limit

Command			Description			Example
#getent group		list all groups
#groups u1		specifig user groups
#id u1			detailed info i.e. 10
#getent group 10	wheel:x:10:sysadmin,noman,user1
#cat /etc/group		view group file directly
#cut -d: -f1 /etc/group	list group names only
#getent group wheel	search specific group
#getent group | grep '^w'	starting with w (group and attached users)
#group '^w' /etc/group		local groups only
#newgrp wheel			
#groupadd mygroup
#groupdel mygroup
#usermod -aG mygroup u1		add user u1 to mygroup
#groups
#newgrp 		developers	temporarily changes active group

Add a New Group
sudo groupadd developers
Add a User to a Group
sudo usermod -aG developers alice
Remove a User from a Group
sudo gpasswd -d alice developers
View All Groups for a User
groups alice
Rename a Group
sudo groupmod -n devs developers


groupadd	Create a new group		sudo groupadd developers
groupdel	Delete a group			sudo groupdel developers
groupmod	rename a group 			sudo groupmod -n devs developers
groups		Show groups a user belongs to	groups alice
id		Show UID, GID, and groups of a user	id alice
gpasswd		Administer /etc/group (add/remove users from group)	sudo gpasswd -a alice developers
usermod		Modify a user’s group memberships	sudo usermod -aG developers alice
newgrp		Log in to a new group temporarily (changes current group ID)	newgrp developers
getent group	View all groups (from /etc/group or network source)	getent group
cat /etc/group	View local group file directly				cat /etc/group

-----------------file permission to groups
#useradd u1
#passwd u1
#useradd u2
#passwd u2
$mkdir /home/u1/shared
$echo "this is user u1 work" > /home/u1/shared/abc.txt
#usermod -aG sharedgroup u1
#usermod -aG sharedgroup u2

#chgrp mygroup /home/u1/shared
#chmod 770 /home/u1/shared
#chgrp mygroup /home/u1/shared/abc.txt
#chmod 660 /home/u1/shared/abc.txt


#groupadd mygroup    #getent group mygroup     #groupdel mygroup
#usermod -aG sharedgroup u1
#usermod -aG sharedgroup u2
$mkdir /home/u1/shared
$echo "this is my work" > /home/u1/shared/abc.txt



https://www.youtube.com/watch?v=Et2cvQvIyUY
https://www.youtube.com/watch?v=vo9F_l_wwZs&list=PL0tP8lerTbX3eUtBFS0Ir4_aFqKuXWjYZ&index=71

----------------File permission ACL 
$getfacl abc.txt	(to check permission)
$setfacl -m u:u2:rwx abc.txt  (adding permission for user)
$setfacl -m g:mygroup:rwx abc.txt (add permission to group) -m means modification
$setfact -x u:u2 abc.txt   (to remove user permission)
$setfact -b abc.txt (to remove all entries like group)
$setfact -Rm u:u2:rw myfolder/    (adding permission for u2 in all files inside folder)
$ls -ltr
-----------------file permission to all other users
#useradd u1
#suer passwd u1
#su - u1
$touch abc.txt
$ls -l /home/u1
$ls -l /home/abc.txt
$exit			exit back to root
#useradd u2
#passwd u2
#su - u2
$chmod 755 /home/u1
$mkdir /home/u1/shared
$cp /home/u1/abc.txt /home/u1/shared 
$chmod 777 /home/u1/shared/abc.txt
----Now u2 can modify the file  

-----------------file permission to groups
#useradd u1
#passwd u1
#useradd u2
#passwd u2
$mkdir /home/u1/shared
$echo "this is user u1 work" > /home/u1/shared/abc.txt
#groupadd mygroup
#usermod -aG sharedgroup u1
#usermod -aG sharedgroup u2

#chgrp mygroup /home/u1/shared
#chmod 770 /home/u1/shared
#chgrp mygroup /home/u1/shared/abc.txt
#chmod 660 /home/u1/shared/abc.txt


#groupadd mygroup    #getent group mygroup     #groupdel mygroup
#usermod -aG sharedgroup u1
#usermod -aG sharedgroup u2
$mkdir /home/u1/shared
$echo "this is my work" > /home/u1/shared/abc.txt


------------make sudo user
wheel group that grants suo privileges.
#sudo usermod -aG wheel u1 (make sudo user)		
$sudo whoami (check)
$groups u1 (check)
$sudo gpasswd -d u1 wheel (remove sudo)


















#adduser noman
#usencpardel noman               Delete the User
#userdel -r noman               Delete the User
#rm -rf /home/abc  forcefully and recursively remove everything under /home/abc.
#getent passwd noman   verify user has deleted
#usermod -aG wheel noman       Add noman to the wheel group - This grants sudo access to the user.
$chmod 777 user1file.txt	add full permission
$chmod u-r user1file.txt	exclue user read permission
$chmod u+r user1file.txt	exclue user read permission

chown: to change user ownership
chgrp: to change group ownership

----------------DELETING	Note: some time user's having file in /var/mail directory
#Ps –u noman                    to see all processes by the user:
sudo kill -9 4472                Kill Specific Process (e.g. 4472)
sudo pkill -u noman        Kill All User Processes
sudo userdel noman       Delete the User
sudo userdel -r noman   With deleting home directory
sudo rm -rf /home/abc  forcefully and recursively remove everything under /home/abc.
getent passwd noman   verify user has deleted
 
sudo userdel abc              Deletes the user account, but leaves the home directory
sudo userdel -r abc          Deletes the user and their home directory.
sudo pkill -u abc                Kills all running processes of user abc, but doesn’t remove files.
Note: If just ran userdel without -r, their files remain in /home.


y
File Permissions:
7 type of file permission:
#ls -l
read,write,execute

Ansable: 
Ansable Tower:
id bob   bob is user, group is bob
#useradd ansadmin2
#passwd asnadmin2
#ll
#userdel bob     only account deleted  (passwd, shadow, group)
#userdel -r bob   del account + directory + mail 

/etc/passwd, /etc/shadow, /.etc/group, dir is created, mail spool

cronjob  as root, cronjob as user
#dh -h /data    output.txt
#rm -rf nadee, redhat    delete file 



cat /etc/passwd | grep sarah

rwx  = 7
rwx --- --- = 7 0 0 
ls read
#umask command tempreary    --0022
Change permission:
A/bsolute mode: 
Symbolic mode:
#chmod 
#chown  change ownership:group
#chown ownership:group
#chown ownership
#shown group
#chown 
user bob, now he is the member of NIT group
bob has ownership of file#


#chown bob:nit test.sh
#stat /root

read
write
execute
suid
guid
sticky bit
ACL


$stat test.sh
A NIT group only that member have permission to rwx
add group


---------07/09/2025
0	e
2	w
4	r
full access means 777 dir  owner

#groupadd testers     bob and sarah are in testers group
#cd /home
#useradd sarah -u  specific id
#cat /etc/passwd   to check id here find next id
#usermod sarah -aG Testersu    add sarah to add in testers group
#usermod bob -aG Testers
#getent group Testers
#userad user1
#passwd
#cd home
#su - user1
$touch testfile
$mkdir testdir
here user1 has full access
$chown zawar testfile    not permitted
$sudo shown zawar testfile	this incident will be reported
$su - user1
$chmood 777 testfile
$ls -l testfile      full access














